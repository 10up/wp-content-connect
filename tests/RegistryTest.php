<?php

namespace TenUp\P2P\Tests;

use TenUp\P2P\Registry;
use TenUp\P2P\Relationships\ManyToMany;

class RegistryTest extends P2PTestCase {

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function test_relationship_doesnt_exist() {
		$registry = new Registry();

		$this->assertFalse( $registry->relationship_exists( 'post', 'post' ) );
	}

	public function test_relationship_can_be_added() {
		$registry = new Registry();

		$this->assertInstanceOf( ManyToMany::class, $registry->define_many_to_many( 'post', 'post' ) );
	}

	public function test_doesnt_add_duplicates() {
		$registry = new Registry();

		$this->expectException( \Exception::class );

		$registry->define_many_to_many( 'post', 'post' );
		$registry->define_many_to_many( 'post', 'post' );
	}

	public function test_flipped_order_is_still_duplicate() {
		$registry = new Registry();

		$this->expectException( \Exception::class );

		$registry->define_many_to_many( 'post', 'car' );
		$registry->define_many_to_many( 'car', 'post' );
	}

	public function test_retreival_of_relationship() {
		$registry = new Registry();

		// Add all the relationship types so we know we aren't just lucky in the return values
		$pp = $registry->define_many_to_many( 'post', 'post' );
		$pc = $registry->define_many_to_many( 'post', 'car' );
		$pt = $registry->define_many_to_many( 'post', 'tire' );
		$ct = $registry->define_many_to_many( 'car', 'tire' );
		$cc = $registry->define_many_to_many( 'car', 'car' );
		$tt = $registry->define_many_to_many( 'tire', 'tire' );

		$tt2 = new ManyToMany( 'tire', 'tire' );

		// Verify that two separate objects are NOT the same (sanity check)
		$this->assertNotSame( $tt, $tt2 );

		$this->assertSame( $pp, $registry->get_relationship( 'post', 'post' ) );

		// Check that it doesn't matter the order of args
		$this->assertSame( $pc, $registry->get_relationship( 'post', 'car' ) );
		$this->assertSame( $pc, $registry->get_relationship( 'car', 'post' ) );

		// Check that calling inverse args returns the same as well (it should, based on above two tests)
		$this->assertSame( $registry->get_relationship( 'post', 'car' ), $registry->get_relationship( 'car', 'post' ) );
	}

}
